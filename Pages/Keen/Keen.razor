@page "/keen"

<PageTitle>Keen | Kotlin Evolutionary Computation Framework</PageTitle>
<section class="title">
    <h1 class="title">Keen | Kotlin Evolutionary Computation Framework</h1>
</section>
<section class="logos">
    <div class="shields">
        <a href="https://search.maven.org/artifact/cl.ravenhill/keen-core" target="_blank" aria-label="View Keen on Maven Central">
            <img src="https://img.shields.io/maven-central/v/cl.ravenhill/keen-core.svg" alt="Maven Central">
        </a>
        <a href="https://opensource.org/licenses/BSD-2-Clause" target="_blank" aria-label="View BSD 2-Clause License">
            <img src="https://img.shields.io/badge/License-BSD_2--Clause-orange.svg" alt="License">
        </a>w
    </div>
    <div class="logo">
        <img src="images/keen-logo.png" alt="Keen Logo" class="logo-img">
    </div>
</section>

<section class="description">
    <p>
        Keen is a framework for Kotlin that leverages evolutionary algorithms to solve optimization problems.
        It harnesses the power and expressiveness of Kotlin to provide an intuitive and efficient interface for researchers,
        scientists, and developers alike.
        With Keen, you can build and fine-tune complex evolutionary algorithms with just a few lines of code.
    </p>
    <p>
        Whether you are delving into genetic algorithms for the first time or are an experienced researcher looking for a
        Kotlin-native tool, Keen offers a streamlined experience without sacrificing depth or flexibility. Its modular
        architecture means you can easily extend or modify components, from selection and crossover methods to mutation and
        fitness evaluation.
    </p>
</section>

<section class="one-max">
    <h2>OneMax Example</h2>
    <p>
        The following example demonstrates how to solve the OneMax problem using Keen. The OneMax problem is a simple
        optimization problem where the goal is to maximize the number of ones in a binary string.
    </p>
    <pre>
    <code class="language-kotlin">
private fun count(genotype: Genotype&lt;Boolean, BooleanGene&gt;) = genotype.flatten().count { it }.toDouble()

fun main() {
    val engine = evolutionEngine(::count, genotypeOf {
        chromosomeOf {
            booleans {
                size = 50
                trueRate = 0.15
            }
        }
    }) {
        alterers += listOf(BitFlipMutator(individualRate = 0.5), UniformCrossover(chromosomeRate = 0.6))
        limits += TargetFitness(50.0)
        listeners += listOf(EvolutionSummary(), EvolutionPlotter())
    }
    engine.evolve()
    engine.listeners.forEach { it.display() }
}
    </code>
    </pre>

    <h4>Output</h4>
    <pre>
------------ Evolution Summary ---------------
|--> Initialization time: 834 ms
------------- Evaluation Times ----------------
|--> Average: 0.0 ms
|--> Max: 0 ms
|--> Min: 0 ms
-------------- Selection Times ----------------
|   |--> Offspring Selection
|   |   |--> Average: 0.4077922077922078 ms
|   |   |--> Max: 157 ms
|   |   |--> Min: 0 ms
|   |--> Survivor Selection
|   |   |--> Average: 0.0 ms
|   |   |--> Max: 0 ms
|   |   |--> Min: 0 ms
--------------- Alteration Times --------------
|--> Average: 2.433766233766234 ms
|--> Max: 910 ms
|--> Min: 0 ms
-------------- Evolution Results --------------
|--> Total time: 3714 ms
|--> Average generation time: 7.992207792207792 ms
|--> Max generation time: 2982 ms
|--> Min generation time: 0 ms
|--> Generation: 385
|--> Steady generations: 0
|--> Fittest: [0011 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111]
|--> Best fitness: 50.0
</pre>
    <img src="images/onemax_fitness.png" alt="OneMax Fitness Plot" class="plot">
</section>